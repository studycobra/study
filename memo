<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <style>
      body {
        background-color: #242424;
      }
      #header {
        border-top: solid 3px rgba(255,255,255,0.3);
        border-bottom: solid 2px rgba(0,0,0,0.2);
        height: 55px;
        margin-bottom: 5px;
      }
      #title{
        text-align: center;
        z-index: 200;
        width: 100%;
      }
      #title.fixed{
        position: fixed;
      }
      #title svg{
        display: inline-block;
      }
      .label{
        font-size: 18px; fill: #888;
      }
      .event-label{
        font-size: 12px; fill: #ccc;
      }
    </style>
</head>
<body>
  <div id="header">
    <div style="width:400px; padding:10px 0px" class="center-block">
      <div class="input-group" style="margin:0px 0px">
        <input type="text" class="form-control input-sm" placeholder="件名NO">
        <span class="input-group-btn">
          <button class="btn btn-primary btn-sm" type="button" id="btn-search">調査</button>
        </span>
      </div>
    </div>
  </div>
  <div id="title"></div>
  <div id="tree"></div>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.26.0/moment.min.js"></script>
    <script>
      $(function(){
        $(window).scroll(function() {
          if ($(window).scrollTop() > 60) $('#title').addClass('fixed').css('top', 0);
          else $('#title').removeClass('fixed');
        });
        $('#btn-search').click(function(){
          draw();
        });
      });

      var ep = new EditPart();
      var link = d3.linkVertical().x(function(d){return d.x;}).y(function(d){return d.y;});
      var title = d3.select('#title').append('svg');
      
      var tree = d3.select('#tree').append('svg');
      tree.attr('class', 'center-block');


      function draw() {
        var data = new Data([

        ]);
        title.selectAll('.title').remove();
        tree.selectAll('.lane').remove();
        var size = ep.getSize(data.get());
        title.attr('width', size.width).attr('height', 25);
        tree.attr('width', size.width).attr('height', size.height);
        data.get().forEach(function(laneData){
          ep.createTitle(laneData);
          ep.createLane(laneData, data.getById(laneData.from));
        });
      }



      function Data(data) {
        var color = ['#ff251e', '#ff9100', '#ffca00', '#a78354', '#02cc2f', '#ed0092', '#0085e0'];
        function setOtherData(data) {
          deleteData(data);
          setLaneSeqAndColor(data);
          setHistorySeq(data);
        }
        function deleteData(data) {
          data = data.filter(function(v){return v.history.length > 0});
        }
        function setLaneSeqAndColor(data) {
          var seq = 0;
          data.forEach(function(v){
            v.color = color[seq%(color.length)];
            v.seq = seq++;
          });
        }
        function setHistorySeq(data) {
          var forSort = [];
          data.forEach(function(v){
            v.history.forEach(function(h, i){forSort.push(h);});
          });
          forSort.sort(function(a,b){
            if(a.datetime == b.datetime) return 0;
            return (a.datetime < b.datetime) ? -1 : 1;
          });
          var seq = 0;
          forSort.forEach(function(v){v.seq = seq++;});
        }
        setOtherData(data);
        this.get = function(){return data};
        this.getById = function(id){
          var res = data.filter(function(d){return d.id === id});
          return res.length > 0 ? res[0] : null;
        };
      }

      function EditPart() {
        var laneMargin = 150;
        var seqHeight = 40;
        var lavelAdjust = {x: 10, y: 5}

        function createLine(lane, laneData, fromLaneData) {
          var y = seqHeight * (laneData.history[0].seq + (fromLaneData !== null ? 1 : 0));
          lane.append('line').attr('y1', y).attr('y2', 700)
          .attr("stroke-width",2).attr("stroke", laneData.color);
          if (fromLaneData !== null) {
            var sourceX = laneMargin * (fromLaneData.seq - laneData.seq);
            var sourceY = seqHeight * laneData.history[0].seq;
            lane.append('path').attr('fill', 'none').attr("stroke-width",2).attr('stroke', laneData.color)
              .attr('d', link({source: {x: sourceX, y: sourceY}, target: {x: 0, y: y}}));
          }
        }

        function createEvents(lane, laneData, fromLaneData) {
          var histCnt = 0;
          laneData.history.forEach(function(h){
            createEvent(lane, laneData, (histCnt === 0 && fromLaneData !== null) ? fromLaneData : null, h);
            histCnt++;
          });
        }

        function createEvent(lane, laneData, fromLaneData, hist) {
          var x = laneMargin * ((fromLaneData != null) ? (fromLaneData.seq - laneData.seq) : 0);
          var y = seqHeight * hist.seq;
          lane.append('circle').attr('cx', x).attr('cy', y).attr('r', 5)
            .attr('fill', laneData.color).attr("stroke-width",1).attr("stroke","#242424");
          var d = moment(new Date());
          lane.append('text').attr('class', 'event-label').attr('x', x + lavelAdjust.x).attr('y', y + lavelAdjust.y).text(d.format("MM/DD hh:mm:ss"));
          lane.append('text').attr('class', 'event-label').attr('x', x + lavelAdjust.x).attr('y', y + 15 + lavelAdjust.y).text(hist.title);
        }

        this.createTitle = function(laneData) {
          var titleMargin = 2;
          var x = laneMargin * laneData.seq;
          var g = title.append('g').attr('class', 'title').attr('transform', 'translate(' + x + ', 0)');
          g.append('rect').attr('x', titleMargin).attr("width", laneMargin - titleMargin*2).attr('height', 25).attr('fill', 'rgba(65, 65, 65, 0.8)');
          g.append('text').attr('class', 'label').attr('x', titleMargin + 6).attr('y', 20).text(laneData.title);
        };

        this.createLane = function(laneData, fromLaneData) {
          var x = 10 + laneMargin * laneData.seq;
          var y = 10;
          var lane = tree.append('g').attr('class', 'lane').attr('transform', 'translate(' + x + ', ' + y + ')');
          createLine(lane, laneData, fromLaneData);
          createEvents(lane, laneData, fromLaneData);
        };

        this.getSize = function(laneDatas) {
          var forMax = [];
          laneDatas.forEach(function(laneData){
            laneData.history.forEach(function(hist){forMax.push(hist.seq);});
          });
          return {
            width: laneDatas.length * laneMargin + 50,
            height: (forMax.length < 1 ? 0 : Math.max.apply(null, forMax)) * seqHeight
          };
        }

      }

    </script>  
</body>
</html>
